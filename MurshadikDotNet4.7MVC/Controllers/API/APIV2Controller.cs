using Microsoft.IdentityModel.Tokens;
using MurshadikCP.Models;
using MurshadikCP.Models.DB;
using MurshadikCP.Repositories;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Security.Claims;
using System.Text;
using System.Web;
using System.Web.Hosting;
using System.Web.Http;
using System.Web.Http.Controllers;

namespace MurshadikCP.Controllers.API
{
    [RoutePrefix("api/V2")]
    public class APIV2Controller : ApiController
    {
        private AppUser currentUser
        {
            get
            {
                return HttpContext.Current.User.Identity.appUser();
            }
        }

        #region functions

        private string SendOTP(string phoneNo)
        {
            string[] phoneNumbers = System.Configuration.ConfigurationManager.AppSettings["testingPhoneNumbers"].Split(',');
            if (phoneNumbers.Contains(phoneNo))
            {
                return "3658";
            }

            Random generator = new Random();
            String otp = generator.Next(0, 9999).ToString("D4");
            string msg = "فضلا استخدام رمز التفعيل " + otp + " لتسجيل الدخول في تطبيق مرشدك الزراعي";

            //SendSMS sms = new SendSMS();
            //sms.SMSSend(phoneNo, msg);

            //SendSMSYamamah smsy = new SendSMSYamamah();
            //smsy.sendSMSByYamamahAPI(phoneNo, msg);

            return otp;
        }

        public user RegisterUser(string userName, string country, long role_id, int app_type)
        {
            try
            {
                GenericRepository<user> userRepo = new GenericRepository<user>();
                user newUser = new user();
                newUser.user_id = Guid.NewGuid().ToString();
                newUser.password = RandomString(15);
                newUser.phone = userName;
                newUser.last_name = "";
                newUser.app_type = app_type;
                newUser.role_id = role_id;
                newUser.name = userName;
                newUser.active = true;
                newUser.region_id = 8;
                newUser.city_code = "OERK";
                newUser.country = country;
                newUser.rating = 0;
                newUser.is_approved = false;
                newUser.created_at = DateTime.Now;
                newUser.is_market_notification_enabled = true;
                newUser.is_weather_notification_enabled = true;
                newUser.last_login_date = DateTime.Now;
                userRepo.Insert(newUser);
                userRepo.Save();
                return newUser;

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private static Random random = new Random();
        public static string RandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }

        // check username and return Token which is generated by JWT
        public string GetToken(user user)
        {
            string key = "my_secret_key_1231321";
            var issuer = "http://murshadik.com";
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(key));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

            //user user = db.users.Where(x => x.phone == UserName).Include(x => x.role).FirstOrDefault();
            if (user != null)
            {
                var paramClaims = new List<Claim>();
                paramClaims.Add(new Claim(Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()));
                paramClaims.Add(new Claim("valid", user.active.ToString()));
                paramClaims.Add(new Claim("userid", user.id.ToString()));
                paramClaims.Add(new Claim("fullname", user.prefix + " " + user.name + " " + user.last_name));
                paramClaims.Add(new Claim("name", user.name));
                paramClaims.Add(new Claim("last_name", user.last_name == null ? "" : user.last_name));
                paramClaims.Add(new Claim("roleid", user.role_id.ToString()));
                paramClaims.Add(new Claim("rolename", user.role.name_en));
                paramClaims.Add(new Claim("is_profile_completed", user.is_profile_completed.ToString()));

                var token = new JwtSecurityToken(issuer,
                    issuer,
                    paramClaims,
                    expires: DateTime.Now.AddYears(1),
                    signingCredentials: credentials);

                var jwt_token = new JwtSecurityTokenHandler().WriteToken(token);

                return jwt_token.ToString();//data = jwt_token, isNew = user.is_profile_completed };
            }
            return "user not exists in our system!";
        }

        public object getUserSkills(long id)
        {
            SkillRepository sr = new SkillRepository();
            return sr.GetUserSkills(id);
        }

        // based on user id it returns consultant skills for profile
        public string GetSkillsByConsultantForProfile(long id)
        {
            SkillRepository sr = new SkillRepository();
            return sr.GetAllSkillsByConsultant(id);
        }

        // based on user id it return consultant skills
        public string GetSkillsByConsultant(long id)
        {
            SkillRepository sr = new SkillRepository();
            return sr.GetSkillsByConsultant(id);
        }

        #endregion

        #region All_Api_Methods
        [HttpGet]
        [Route("ResendOTP")]
        public Data ResendOTP(string username)
        {

            UserRepository ur = new UserRepository();
            GenericRepository<otp> otpRepo = new GenericRepository<otp>();
            Data d = new Data();

            if (username == "" || username == null)
            {
                d.message = "phone number is not in proper format!";
                d.status = false;
                d.data = "otp failed";
                return d;
            }

            user u = ur.GetUserByID(username);

            if (u != null)
            {
                string otpStr = this.SendOTP(username);
                otp otp = ur.GetOtpFor(u.id);

                bool isNew = false;
                if (otp == null)
                {
                    otp = new otp();
                    isNew = true;
                }

                otp.user_id = u.id;
                otp.created_at = DateTime.Now;
                otp.otp1 = otpStr;

                otp.attempts = otp != null ? otp.attempts + 1 : 1;
                if (!isNew)
                {
                    otpRepo.Update(otp);
                }
                else
                {
                    otpRepo.Insert(otp);
                }
                otpRepo.Save();

                d.status = true;
                d.data = "otp successfully sent! ";
                d.message = "Otp send successfully... Attempts No :" + otp.attempts.ToString();
            }
            else
            {
                d.status = false;
                d.data = "user not found";
                d.message = "user not exists";
            }

            return d;
        }

        [HttpGet]
        [Route("CheckLogin")]
        public Data CheckLogin(string username, string country, long role_id, int app_type = 1)
        {
            Data d = new Data();
            UserRepository ur = new UserRepository();
            GenericRepository<otp> otpRepo = new GenericRepository<otp>();
            if (username == null || username == "")
            {
                d.message = "phone number is not in proper format!";
                d.status = false;
                d.data = "otp failed";
                return d;
            }

            user u = ur.GetUserByID(username);

            if (u != null)
            {
                d.message = "Successfully Done! User exists Generate Token";
            }
            else
            {
                u = RegisterUser(username, country, role_id, app_type);

                if (u != null)
                {
                    d.message = "Successfully Done! User not exists, create user first and Generate Token partially!";
                }
                else
                {
                    d.message = "Error!";
                    d.status = false;
                    d.data = null;
                    return d;
                }
            }

            string otp = this.SendOTP(username);

            otp checkOtp = ur.GetOtpFor(u.id);
            if (checkOtp == null)
            {
                checkOtp = new otp();
                checkOtp.user_id = u.id;
                checkOtp.created_at = DateTime.Now;
                checkOtp.otp1 = otp;
                checkOtp.attempts = 1;
                otpRepo.Insert(checkOtp);
            }
            else
            {
                checkOtp.created_at = DateTime.Now;
                checkOtp.otp1 = otp;
                checkOtp.attempts = 1;
                otpRepo.Update(checkOtp);
            }

            otpRepo.Save();

            d.status = true;
            d.data = "otp successfully sent!";
            return d;
        }

        [APIAuthorization]
        [HttpPost]
        [Route("EnableNotificationForType")]
        public Data EnableNotificationForType()
        {
            Data d = new Data();
            try
            {
                long uid = this.currentUser.UserId;

                int type_id = Convert.ToInt32(HttpContext.Current.Request.Form["type_id"].ToString());
                bool is_enabled = Convert.ToBoolean(HttpContext.Current.Request.Form["is_enabled"].ToString());
                user u = this.currentUser.dbUser;
                if (type_id == (int)UserNotificationType.Market)
                {
                    u.is_market_notification_enabled = is_enabled;
                }
                else
                {
                    u.is_weather_notification_enabled = is_enabled;
                }

                UserRepository ur = new UserRepository();
                ur.Update(u);
                ur.Save();
                d.status = true;
                d.message = "success";
            }
            catch (Exception ex)
            {
                d.status = false;
                d.message = ex.Message.ToString();
            }
            return d;
        }

        [HttpPost]
        [Route("CheckOTPNew")]
        public Data CheckOTPNew(string UserName, string OTP)
        {
            Data d = new Data();
            UserRepository ur = new UserRepository();
            GenericRepository<otp> otpRepo = new GenericRepository<otp>();
            user u = ur.GetUserIncludeRoleByID(UserName, "role");
            if (u == null)
            {
                d.message = "User not found!";
                d.status = false;
                d.data = null;
                return d;
            }

            if (u.linked_in == "1")
            {
                if (OTP == "3658")
                {
                    d.message = GetToken(u);//"Successfully Done! User exists Generate Token";
                    d.status = true;
                    d.data = new { user = u, skills = getUserSkills(u.id) };
                }
                else
                {
                    d.message = "Invalid OTP!";
                    d.status = false;
                    d.data = null;
                }
            }
            else
            {
                otp otp = ur.GetOtpFor(u.id);
                if (otp != null)
                {
                    string saveOTP = otp.otp1.ToString();
                    if (saveOTP == OTP)
                    {
                        d.message = GetToken(u);
                        d.status = true;
                        d.data = new { user = u, skills = getUserSkills(u.id) };
                        otpRepo.Delete((int)otp.id);
                        otpRepo.Save();
                    }
                    else
                    {
                        d.message = "Invalid OTP!";
                        d.status = false;
                        d.data = null;
                    }
                }
            }

            return d;
        }

        [HttpPost]
        [Route("CheckOTP")]
        public Data CheckOTP(string UserName, string OTP)
        {
            Data d = new Data();
            UserRepository ur = new UserRepository();
            GenericRepository<otp> otpRepo = new GenericRepository<otp>();
            user u = ur.GetUserByID(UserName);
            if (u == null)
            {
                d.message = "User not found!";
                d.status = false;
                d.data = null;
                return d;
            }

            otp otp = ur.GetOtpFor(u.id);
            string saveOTP = otp != null ? otp.otp1.ToString() : "";

            if (u.linked_in == "1")
            {
                if (OTP == "3658")
                {
                    d.message = GetToken(u);
                    d.status = true;
                    d.data = new { user = u, skills = getUserSkills(u.id) };
                }
                else
                {
                    d.message = "Invalid OTP!";
                    d.status = false;
                    d.data = null;
                }
            }
            else
            {
                if (saveOTP == OTP)
                {
                    d.message = GetToken(u);
                    d.status = true;
                    user u1 = new user();
                    u1.id = u.id;
                    u1.name = u.name;
                    u1.phone = u.phone;
                    u1.role_id = u.role_id;
                    u1.user_id = u.user_id;
                    u1.app_type = u.app_type;
                    u1.region_id = u.region_id;
                    u1.avatar = u.avatar;
                    u1.firebase_token = u.firebase_token;

                    u1.active = u.active;
                    u1.country = u.country;
                    u1.region = u.region;
                    u1.skills = u.role_id == 6 ? GetSkillsByConsultantForProfile(u.id) : u.skills;
                    u1.governorate = u.governorate;
                    u1.municipality = u.municipality;
                    u1.linked_in = u.linked_in;
                    u1.last_name = u.last_name;
                    u1.city_code = u.city_code;
                    u1.is_group_admin = u.is_group_admin;
                    u1.can_post = u.can_post;
                    u1.is_profile_completed = u.is_profile_completed;
                    u1.is_approved = u.is_approved;
                    u1.is_market_notification_enabled = u.is_market_notification_enabled;
                    u1.is_weather_notification_enabled = u.is_weather_notification_enabled;

                    d.data = u;

                    // after removing otp when successfully done
                    otpRepo.Delete((int)otp.id);
                    otpRepo.Save();
                }
                else
                {
                    d.message = "Invalid OTP!";
                    d.status = false;
                    d.data = null;
                }
            }
            return d;
        }

        [APIAuthorization]
        [HttpDelete]
        [Route("DeleteAllNotification_byId")]
        public Data DeleteAllNotification(long id)
        {
            GenericRepository<notification> notiRepo = new GenericRepository<notification>();
            Data d = new Data();

            notiRepo.Delete((int)id);
            notiRepo.Save();

            d.status = true;
            d.message = "Delete All Notification by id Successfully!";
            d.data = null;
            return d;
        }

        // delete all notification based on user id
        [APIAuthorization]
        [HttpDelete]
        [Route("DeleteAllNotification")]
        public Data DeleteAllNotification()
        {
            NotificationRepository nr = new NotificationRepository();
            Data d = new Data();
            long uid = this.currentUser.UserId;
            nr.DeleteAllNotification(uid);

            d.status = true;
            d.message = "Delete All Notification Successfully!";
            d.data = null;
            return d;
        }

        // based on datetime return all notification according to the user id
        [APIAuthorization]
        [HttpGet]
        [Route("GetAllNotification")]
        public List<notification> GetAllNotification(string dateTime)
        {
            NotificationRepository nr = new NotificationRepository();
            long uid = this.currentUser.UserId;
            DateTime dt = Convert.ToDateTime(dateTime);
            return nr.GetAllNotification(uid, dt);
        }

        // chat data based on chatid according to the user
        [APIAuthorization]
        [HttpGet]
        [Route("getUserByChatId")]
        public object getUserByChatId(long id)
        {
            UserRepository ur = new UserRepository();
            string chatid = id.ToString();
            user u = ur.GetUserByChatId(chatid);
            if (u.role_id == (int)Role.Consultants)
            {
                u.skills = GetSkillsByConsultant(id);
            }

            var user = new
            {
                id = u.id,
                name = u.name + " " + u.last_name,
                phone = u.phone,
                region = ur.GetRegionNameByRegionId(u.region_id),
                skills = u.skills,
                profile = u.profile,
                avatar = u.avatar,
                chatId = u.chatId,
                is_online = u.is_online,
                rating = u.rating,
                role_id = u.role_id,
                country = u.country
            };

            if (user != null)
            {
                return Ok(user);
            }

            return NotFound();
        }

        // return user details by userid
        [APIAuthorization]
        [HttpGet]
        [Route("getUserBy/{id}")]
        public object getUserByID(long id)
        {
            UserRepository ur = new UserRepository();
            user u = ur.GetById(id);
            if (u.role_id == 6)
            {
                u.skills = GetSkillsByConsultant(id);
            }

            var user = new
            {
                id = u.id,
                name = u.name + " " + u.last_name,
                phone = u.phone,
                region = ur.GetRegionNameByRegionId(u.region_id),
                skills = u.skills,
                profile = u.profile,
                avatar = u.avatar,
                chatId = u.chatId,
                is_online = u.is_online,
                rating = u.rating,
                role_id = u.role_id,
                country = u.country
            };

            if (user != null)
            {
                return Ok(user);
            }

            return NotFound();

        }

        // based on lab_id and datetime and return the appointment data
        //[APIAuthorization]
        [HttpGet]
        [Route("GetAllAppointmentbyLabID")]
        public object GetAllAppointmentbyLabID(long lab_id, string date)
        {
            AppointmentRepository ar = new AppointmentRepository();
            return ar.GetAllAppointmentByLabID(lab_id, date);
        }

        // showing the details on application after open the application
        // its contains images and statistics data from tables
        // to just show the dashboard
        [HttpGet]
        [Route("New_Dashboard")]
        public object getDashboardData()
        {
            UserRepository ur = new UserRepository();
            return ur.GetDashboardData();
        }

        // get_message return list of messages from chat id
        [APIAuthorization]
        [HttpGet]
        [Route("Get_Message")]
        public List<chatmessage> Get_Message(string receiver_id)
        {
            ChatMessageRepository cmr = new ChatMessageRepository();
            return cmr.GetMessageByReceiverId(receiver_id);
        }

        // return all chats based on user id
        [APIAuthorization]
        [HttpGet]
        [Route("GetAllChats")]
        public object GetAllChats()
        {
            ChatRepository cr = new ChatRepository();
            string user_id = User.Identity.appUser().UserId.ToString();
            return cr.GetAllChatsByUserID(user_id);
        }

        // update status based on status type and receiver id
        [APIAuthorization]
        [HttpGet]
        [Route("Update_Status")]
        public Data Update_Status(string receiver_id)
        {
            ChatMessageRepository cmr = new ChatMessageRepository();

            Data d = new Data();
            string message = "";
            chatmessage cm = cmr.GetLastChatMessageByUserId(receiver_id);
            if (cm != null)
            {
                message = cm.message;
            }

            d.status = true;
            d.message = message;
            d.data = null;

            return d;
        }

        // return group messages
        [APIAuthorization]
        [HttpGet]
        [Route("getgroupmessages")]
        public List<group_messages> getGroupMessages(int id = 0, string dt = null)
        {
            GroupMessageRepository gmr = new GroupMessageRepository();
            return gmr.GetGroupMessages(id, dt);
        }

        // return group messages
        [APIAuthorization]
        [HttpGet]
        [Route("getGroupMessagesBy1")]
        public Data getGroupMessagesBy1(int group_id, int? Page_No = 0, int id = 0, int page_size = 20)
        {
            GroupMessageRepository gmr = new GroupMessageRepository();
            return gmr.GetGroupMessagesByPagination(group_id, Page_No, id, page_size);
        }

        // return group messages
        // pagination also there
        [APIAuthorization]
        [HttpGet]
        [Route("getGroupMessagesBy_V2")]
        public Data getGroupMessagesBy(int group_id, int? Page_No = 0, int id = 0, int page_size = 20, bool withMembers = false)
        {
            GroupMessageRepository gmr = new GroupMessageRepository();
            return gmr.GetGroupMessageBy(group_id, Page_No, page_size, withMembers);
        }

        [APIAuthorization]
        [HttpGet]
        [Route("getGroupMessagesBy")]
        public Data getGroupMessagesBy(int group_id, int? Page_No = 0, int id = 0, int page_size = 20)
        {
            GroupMessageRepository gmr = new GroupMessageRepository();
            return gmr.GetGroupMessageBy(group_id, Page_No, page_size);
        }


        // insert group messages takes message, and type_id (image, file, audio etc)
        [APIAuthorization]
        [HttpPost]
        [Route("groupmessage")]
        public group_messages group_Message()
        {
            GroupMessageRepository gmr = new GroupMessageRepository();
            string fullname = User.Identity.appUser().FullName;
            long u_id = User.Identity.appUser().UserId;
            long region_id = User.Identity.appUser().dbUser.region_id;
            int group_id = Convert.ToInt32(region_id);
            int type_id = Convert.ToInt32(HttpContext.Current.Request.Form["type_id"].ToString());
            string message = HttpContext.Current.Request.Form["message"];

            return gmr.InsertGroupMessage(type_id, message, u_id, group_id, fullname);
        }

        // return agriculture calender data
        [HttpGet]
        [Route("getallagriculture_calender")]
        public Data getallagriculture_calender()
        {
            ArticleRepository ar = new ArticleRepository();
            return ar.GetAllAgricultureCalender();
        }

        // insert message data into table
        [APIAuthorization]
        [HttpPost]
        [Route("message")]
        public object Save_Message()
        {
            ChatMessageRepository cmr = new ChatMessageRepository();
            long user_id = User.Identity.appUser().UserId;
            int type_id = Convert.ToInt32(HttpContext.Current.Request.Form["type_id"].ToString());
            string message = HttpContext.Current.Request.Form["message"];
            string receiver_id = HttpContext.Current.Request.Form["receiver_id"].ToString();
            int status = Convert.ToInt16(HttpContext.Current.Request.Form["status"].ToString());

            return cmr.InsertChatMessage(user_id, receiver_id, type_id, message, status);
        }

        // baesd on user id show the user profile information
        [APIAuthorization]
        [HttpGet]
        [Route("GetUserProfileNew")]
        public Data GetUserProfileNew()
        {
            Data d = new Data();
            user u = User.Identity.appUser().dbUser;

            d.status = true;
            d.message = "successfully fetch the data";
            d.data = new { user = u, skills = getUserSkills(u.id) };

            return d;
        }

        // baesd on user id show the user profile information
        [APIAuthorization]
        [HttpGet]
        [Route("GetUserProfile")]
        public user GetUserProfile()
        {
            user u = User.Identity.appUser().dbUser;

            if (u.role_id == 6)
            {
                u.skills = GetSkillsByConsultantForProfile(u.id);
            }
            return u;
        }

        // insert comment to consultant and rating also
        [APIAuthorization]
        [HttpPost]
        [Route("CommentByUser")]
        public Data CommentByUser(long consultantid, float rating, string message)
        {
            Data d = new Data();
            CommentByUserRepository cur = new CommentByUserRepository();
            user u = User.Identity.appUser().dbUser;
            cur.InsertCommentByUser(consultantid, rating, message, u);

            d.status = true;
            d.message = "successful";
            return d;
        }

        // list of market product categories
        [HttpGet]
        [Route("GetMarketProductCategories")]
        public object GetMarketProductCategories()
        {
            MarketProductRepository mpr = new MarketProductRepository();
            return mpr.GetMarketProducts();
        }

        // book for an appointment
        [APIAuthorization]
        [HttpPost]
        [Route("AppointmentBook")]
        public Data AppointmentBook(long appointment_id)
        {
            AppointmentRepository ar = new AppointmentRepository();
            long user_id = User.Identity.appUser().UserId;
            return ar.AppoinmentBook(appointment_id, user_id);
        }

        // get lab data
        [HttpGet]
        [Route("GetLabData")]
        public Object GetLabData()
        {
            LabRepository lr = new LabRepository();
            return lr.GetLabData();
        }

        [HttpGet]
        [Route("GetLab")]
        public Object GetLab()
        {
            LabRepository lr = new LabRepository();
            return lr.GetLab();
        }

        [APIAuthorization]
        [HttpPost]
        [Route("GetClaims")]
        public Object GetClaims()
        {
            var identity = User.Identity as ClaimsIdentity;
            if (identity != null)
            {
                IEnumerable<Claim> claims = identity.Claims;
                return new
                {
                    name = claims.Where(p => p.Type == "name").FirstOrDefault()?.Value,
                    fullname = claims.Where(p => p.Type == "fullname").FirstOrDefault()?.Value,
                    last_name = claims.Where(p => p.Type == "last_name").FirstOrDefault()?.Value,
                    roleName = claims.Where(p => p.Type == "rolename").FirstOrDefault()?.Value,
                    roleid = claims.Where(p => p.Type == "roleid").FirstOrDefault()?.Value,
                    valid = claims.Where(p => p.Type == "valid").FirstOrDefault()?.Value,
                    userid = claims.Where(p => p.Type == "userid").FirstOrDefault()?.Value
                };

            }

            return null;
        }

        // after creating user then update profile
        [APIAuthorization]
        [HttpPost]
        [Route("UpdateProfileNew")]
        public Data RegisterNew()
        {
            UserRepository ur = new UserRepository();
            int role_id = 0;
            Data d = new Data();

            user user = User.Identity.appUser().dbUser;
            if (user != null)
            {
                user.name = HttpContext.Current.Request.Form["name"];
                user.last_name = HttpContext.Current.Request.Form["lastname"];
                user.phone = HttpContext.Current.Request.Form["phone"];
                role_id = Convert.ToInt16(HttpContext.Current.Request.Form["role_id"]);
                user.role_id = role_id;
                user.app_type = Convert.ToInt16(HttpContext.Current.Request.Form["app_type"]);
                user.region_id = Convert.ToInt16(HttpContext.Current.Request.Form["region_id"]);
                user.region = ur.GetRegionName(Convert.ToInt16(HttpContext.Current.Request.Form["region_id"]));
                user.country = HttpContext.Current.Request.Form["country"];
                user.governorate = HttpContext.Current.Request.Form["governorate"];
                user.municipality = HttpContext.Current.Request.Form["municipality"];
                user.skills = HttpContext.Current.Request.Form["skills"];
                user.prefix = HttpContext.Current.Request.Form["prefix"];
                user.profile = HttpContext.Current.Request.Form["profile"];
                user.is_profile_completed = true;
                if (role_id == (int)Role.Farmers)
                { user.is_approved = true; }
                user.city_code = HttpContext.Current.Request.Form["city_code"];
                if (HttpContext.Current.Request.Form["city_id"] != null && HttpContext.Current.Request.Form["city_id"] != "")
                    user.governorate = HttpContext.Current.Request.Form["city_id"];

                var httpContext = HttpContext.Current;

                // Check for any uploaded file  
                if (httpContext.Request.Files.Count > 0)
                {
                    //Loop through uploaded files  
                    for (int i = 0; i < httpContext.Request.Files.Count; i++)
                    {
                        HttpPostedFile httpPostedFile = httpContext.Request.Files[i];
                        if (httpPostedFile != null)
                        {
                            Guid guid = Guid.NewGuid();
                            var img = guid.ToString() + Path.GetExtension(httpPostedFile.FileName);
                            var path = Path.Combine(HostingEnvironment.MapPath("~/Media/Images/Avatar/"), img);
                            // Save the uploaded file  
                            httpPostedFile.SaveAs(path);
                            user.avatar = "/Media/Images/Avatar/" + img;
                        }
                    }
                }

                ur.Update(user);

                if (role_id == (int)Role.Consultants)
                {
                    if (HttpContext.Current.Request.Form["skill_ids"] != null)
                    {

                        long[] skill_id = HttpContext.Current.Request.Form["skill_ids"].Split(',').Select(p => Convert.ToInt64(p)).ToArray();
                        ur.AddSkillUser(skill_id, user.id);
                    }
                }

                d.status = true;
                d.message = GetToken(user);
                user.role = null;
                d.data = user;
                return d;
            }
            else
            {
                d.status = false;
                d.message = "User not exists";
                d.data = null;
                return d;
            }

        }

        // after creating user then update profile
        [APIAuthorization]
        [HttpPost]
        [Route("UpdateProfileIOS")]
        public Data RegisterNew_V2()
        {
            UserRepository ur = new UserRepository();
            int role_id = 0;
            Data d = new Data();

            user user = User.Identity.appUser().dbUser;
            if (user != null)
            {
                user.name = HttpContext.Current.Request.Form["name"];
                user.last_name = HttpContext.Current.Request.Form["lastname"];
                user.phone = HttpContext.Current.Request.Form["phone"];
                role_id = Convert.ToInt16(HttpContext.Current.Request.Form["role_id"]);
                user.role_id = role_id;
                user.app_type = Convert.ToInt16(HttpContext.Current.Request.Form["app_type"]);
                user.region_id = Convert.ToInt16(HttpContext.Current.Request.Form["region_id"]);
                user.region = ur.GetRegionName(Convert.ToInt16(HttpContext.Current.Request.Form["region_id"]));
                user.country = HttpContext.Current.Request.Form["country"];
                user.governorate = HttpContext.Current.Request.Form["governorate"];
                user.municipality = HttpContext.Current.Request.Form["municipality"];
                user.skills = HttpContext.Current.Request.Form["skills"];
                //user.linked_in = HttpContext.Current.Request.Form["linked_in"];
                user.prefix = HttpContext.Current.Request.Form["prefix"];
                user.profile = HttpContext.Current.Request.Form["profile"];
                user.is_profile_completed = true;
                if (role_id == 5)
                { user.is_approved = true; }
                user.city_code = HttpContext.Current.Request.Form["city_code"];
                if (HttpContext.Current.Request.Form["city_id"] != null && HttpContext.Current.Request.Form["city_id"] != "")
                    user.governorate = HttpContext.Current.Request.Form["city_id"];


                var httpContext = HttpContext.Current;

                // Check for any uploaded file  
                if (httpContext.Request.Files.Count > 0)
                {
                    //Loop through uploaded files  
                    for (int i = 0; i < httpContext.Request.Files.Count; i++)
                    {
                        HttpPostedFile httpPostedFile = httpContext.Request.Files[i];
                        if (httpPostedFile != null)
                        {
                            Guid guid = Guid.NewGuid();
                            var img = guid.ToString() + Path.GetExtension(httpPostedFile.FileName);
                            var path = Path.Combine(HostingEnvironment.MapPath("~/Media/Images/Avatar/"), img);
                            // Save the uploaded file  
                            httpPostedFile.SaveAs(path);
                            user.avatar = "/Media/Images/Avatar/" + img;
                        }
                    }
                }

                ur.Update(user);

                if (role_id == (int)Role.Consultants)
                {
                    if (HttpContext.Current.Request.Form["skill_ids"] != null)
                    {
                        long[] skill_id = HttpContext.Current.Request.Form["skill_ids"].Split(',').Select(p => Convert.ToInt64(p)).ToArray();
                        ur.AddSkillUser(skill_id, user.id);
                    }
                }

                ur.Save();

                d.status = true;
                d.message = GetToken(user);
                user.role = null;
                user.skill_user = null;
                user.region = null;
                d.data = new { user = user, skills = getUserSkills(user.id) };
                return d;
            }
            else
            {
                d.status = false;
                d.message = "User not exists";
                d.data = null;
                return d;
            }
        }

        [APIAuthorization]
        [HttpPost]
        [Route("updatecallstatus")]
        public Data updatecallstatus()
        {
            CallDetailRepository cdr = new CallDetailRepository();

            int status = Convert.ToInt16(HttpContext.Current.Request.Form["status"].ToString());
            int type = Convert.ToInt16(HttpContext.Current.Request.Form["type"].ToString());
            Int32 to_user = Convert.ToInt32(HttpContext.Current.Request.Form["to_user"].ToString());
            string call_id = HttpContext.Current.Request.Form["call_id"].ToString();

            return cdr.UpdateCallStatus(status, type, to_user, call_id, User.Identity.appUser().UserId);
        }

        // after creating user then update profile
        [APIAuthorization]
        [HttpPost]
        [Route("UpdateProfile")]
        public Data Register(string name, string lastname, string phone, int role_id, int app_type, int region_id, string country = null, string governorate = null,
            string municipality = null, string skills = null, string linked_in = null, string profile = null, string prefix = null, string city_code = null, string skill_ids = null)
        {
            UserRepository ur = new UserRepository();
            Data d = new Data();
            user user = User.Identity.appUser().dbUser;
            if (user != null)
            {
                user.name = name;
                user.last_name = lastname;
                user.phone = phone;
                user.role_id = role_id;
                user.app_type = app_type;
                user.region_id = region_id;
                user.region = ur.GetRegionName(region_id);
                user.country = country;
                user.governorate = governorate;
                user.municipality = municipality;
                user.skills = skills;
                //user.linked_in = linked_in;
                user.prefix = prefix;
                user.profile = profile;
                user.is_profile_completed = true;
                user.city_code = city_code;

                var httpContext = HttpContext.Current;

                // Check for any uploaded file  
                if (httpContext.Request.Files.Count > 0)
                {
                    //Loop through uploaded files  
                    for (int i = 0; i < httpContext.Request.Files.Count; i++)
                    {
                        HttpPostedFile httpPostedFile = httpContext.Request.Files[i];
                        if (httpPostedFile != null)
                        {
                            Guid guid = Guid.NewGuid();
                            var img = guid.ToString() + Path.GetExtension(httpPostedFile.FileName);
                            var path = Path.Combine(HostingEnvironment.MapPath("~/Media/Images/Avatar/"), img);
                            // Save the uploaded file  
                            httpPostedFile.SaveAs(path);
                            user.avatar = "/Media/Images/Avatar/" + img;
                        }
                    }
                }

                ur.Update(user);
                
                
                if (role_id == (int)Role.Consultants)
                {
                    if (HttpContext.Current.Request.Form["skill_ids"] != null)
                    {
                        long[] skill_id = HttpContext.Current.Request.Form["skill_ids"].Split(',').Select(p => Convert.ToInt64(p)).ToArray();
                        ur.AddSkillUser(skill_id, user.id);
                    }
                }

                ur.Save();

                d.status = true;
                d.message = GetToken(user);
                user.role = null;
                d.data = user;
                return d;
            }
            else
            {
                d.status = false;
                d.message = "User not exists";
                d.data = null;
                return d;
            }
        }

        [APIAuthorization]
        [HttpGet]
        [Route("consultants")]
        public object getAllConsultants()
        {
            UserRepository ur = new UserRepository();
            return ur.GetAllConsultant(User.Identity.appUser().UserId);
        }

        [APIAuthorization]
        [HttpGet]
        [Route("updateChatID/{chatID}")]
        public object updateChatID(string chatID)
        {
            UserRepository ur = new UserRepository();
            ur.UpdateChatID(chatID, User.Identity.appUser().UserId);

            return Ok("successfully inserted");
        }

        [APIAuthorization]
        [HttpGet]
        [Route("getkeywords")]
        public Data getkeywords()
        {
            KeywordRepository kr = new KeywordRepository();
            return kr.GetKeyword();
        }

        [HttpGet]
        [Route("getskills")]
        public object getskills()
        {
            SkillRepository sr = new SkillRepository();
            return sr.GetSkills();
        }

        [HttpGet]
        [Route("getroles")]
        public Data getroles()
        {
            UserRepository ur = new UserRepository();
            return ur.GetRoles();
        }

        [HttpGet]
        [Route("getcities")]
        public object getcities()
        {
            CityRepository cr = new CityRepository();
            return cr.GetAllCities();
        }

        [HttpGet]
        [Route("getregions")]
        public Data getregions()
        {
            RegionRepository rr = new RegionRepository();
            return rr.GetAllRegions();
        }

        [APIAuthorization]
        [HttpGet]
        [Route("getgroups")]
        public Data getgroups()
        {
            GroupRepository gr = new GroupRepository();
            return gr.GetGroups();
        }

        [APIAuthorization]
        [HttpGet]
        [Route("GetAllConsultantRating")]
        public Object GetAllConsultantRating()
        {
            UserRepository ur = new UserRepository();
            return ur.GetAllConsultantRating(User.Identity.appUser().UserId);
        }

        // insert consultant rating which submit by farmers
        [APIAuthorization]
        [HttpPost]
        [Route("ConsultantRating")]
        public Data ConsultantRating()
        {
            ConsultantRatingRepository crr = new ConsultantRatingRepository();
            
            int consultant_id = Convert.ToInt32(HttpContext.Current.Request.Form["consultant_id"].ToString());
            string comment = HttpContext.Current.Request.Form["comment"].ToString();
            decimal rating = Convert.ToDecimal(HttpContext.Current.Request.Form["rating"].ToString());
            return crr.AddConsultantRating(consultant_id, comment, rating, User.Identity.appUser().dbUser);
        }

        [HttpGet]
        [Route("GetQuestionDetail")]
        public Data GetQuestionDetail(long id)
        {
            QARepository QAr = new QARepository();
            return QAr.GetQuestionDetail(id, User.Identity.appUser().UserId);
        }

        // anwer vote up or down from the farmers
        [APIAuthorization]
        [HttpGet]
        [Route("AnswerVote")]
        public Data AnswerVote(long aid, int value)
        {
            QARepository QAr = new QARepository();
            return QAr.AnswerVote(aid, value, User.Identity.appUser().dbUser);
        }

        // question vote up or down from the farmers
        [APIAuthorization]
        [HttpGet]
        [Route("QuestionVote")]
        public Data QuestionVote(long qid, int value)
        {
            QARepository QAr = new QARepository();
            return QAr.QuestionVote(qid, value, User.Identity.appUser().UserId);
        }

        // get all products which are subscribed by end user
        [APIAuthorization]
        [HttpGet]
        [Route("getsubscribersproduct")]
        public object getsubscribersproduct()
        {
            MarketProductRepository mpr = new MarketProductRepository();
            return mpr.GetSubscribersProduct(User.Identity.appUser().UserId);
        }

        [APIAuthorization]
        [Route("category/{category}")]
        public object getCategoryDetails(long category)
        {
            ArticleRepository ar = new ArticleRepository();
            return ar.GetCategoryDetails(category);
        }

        [APIAuthorization]
        [Route("subcategory/{category}")]
        public object getSubcategoryDetails(long category)
        {
            CategoryRepository cr = new CategoryRepository();
            return cr.GetSubCategoryDetails(category);
        }

        // check the user is online or offline and send the notification
        [APIAuthorization]
        [HttpGet]
        [Route("IsOnline")]
        public Data IsOnline(bool value)
        {
            UserRepository ur = new UserRepository();
            return ur.IsOnline(value, User.Identity.appUser().dbUser);
        }

        // it changes the status of user
        // he/she can group admin or can_post 
        [APIAuthorization]
        [HttpGet]
        [Route("ChangeStatusOfUser")]
        public Data ChangeStatusOfUser(long user_id, bool status)
        {
            UserRepository ur = new UserRepository();
            return ur.ChangeStatusOfUser(user_id, status);
        }

        [APIAuthorization]
        [HttpGet]
        [Route("DeleteProductSubscriber")]
        public Data DeleteProductSubscriber(long marketid, long productid)
        {
            ProductSubscriberRepository psr = new ProductSubscriberRepository();
            return psr.DeleteProductSubscriber(marketid, productid, User.Identity.appUser().UserId);
        }

        // showing list of product based on marketid, productid, and increase or decrease the price
        [APIAuthorization]
        [HttpGet]
        [Route("ProductSubscriber")]
        public Data ProductSubscriber(long marketid, long productid, int onincrease)
        {
            ProductSubscriberRepository psr = new ProductSubscriberRepository();
            return psr.ProductSubscriber(marketid, productid, onincrease, User.Identity.appUser().UserId);
        }

        // avatar is user profile pic
        // just update from the end user
        [APIAuthorization]
        [HttpPost]
        [Route("UploadAvatar")]
        public Data UploadAvatar()
        {
            UserRepository ur = new UserRepository();
            
            var httpContext = HttpContext.Current;
            HttpPostedFile httpPostedFile = httpContext.Request.Files[0];
            if (httpPostedFile != null)
            {
                Guid guid = Guid.NewGuid();
                var img = guid.ToString() + Path.GetExtension(httpPostedFile.FileName);
                var path = Path.Combine(HostingEnvironment.MapPath("~/Media/Images/Avatar/"), img);
                // Save the uploaded file  
                httpPostedFile.SaveAs(path);
                return ur.UploadAvatar(User.Identity.appUser().dbUser, img);
            }

            Data d = new Data();
            d.status = false;
            d.message = "unsuccessful";
            d.data = null;
            return d;
        }

        [HttpGet]
        [Route("getCalendarArticles")]
        public object getCalendarArticles()
        {
            AgricultureCalenderRepository acr = new AgricultureCalenderRepository();
            return acr.GetCalenderArticles();
        }

        [APIAuthorization]
        [HttpPost]
        [Route("CreateNewAnswer")]
        public Data CreateNewAnswer()
        {
            QARepository QAr = new QARepository();
            string title = HttpContext.Current.Request.Form["title"];
            string description = HttpContext.Current.Request.Form["description"];
            long question_id = Convert.ToInt32(HttpContext.Current.Request.Form["qid"].ToString());
            return QAr.CreateNewAnswer(User.Identity.appUser().UserId, title, description, question_id, HttpContext.Current);
        }

        [HttpGet]
        [Route("GetCurrentWeatherNoficationByCityId")]
        public Data GetCurrentWeatherNoficationByCityId(int city_id)
        {
            CurrentWeatherNotificationForCityRepository cwn = new CurrentWeatherNotificationForCityRepository();
            return cwn.GetCurrentWeatherNoficationByCityId(city_id);
        }

        [APIAuthorization]
        [HttpPost]
        [Route("CreateNewQuestion")]
        public Data CreateNewQuestion()
        {
            string title = HttpContext.Current.Request.Form["title"];
            string description = HttpContext.Current.Request.Form["description"];
            long qa_category_id = Convert.ToInt32(HttpContext.Current.Request.Form["category_id"].ToString());
            string keywords = HttpContext.Current.Request.Form["keywords"];
            QARepository QAr = new QARepository();
            return QAr.CreateNewQuestion(User.Identity.appUser().UserId, title, description, qa_category_id, keywords, HttpContext.Current);
        }

        [APIAuthorization]
        [HttpPost]
        [Route("updateAppVersion")]
        public Data UpdateApp()
        {
            UserRepository ur = new UserRepository();
            string appVersion = HttpContext.Current.Request.Form["appVersion"];
            string lastLocation = HttpContext.Current.Request.Form["lastLocation"];
            int appType = Convert.ToInt16(HttpContext.Current.Request.Form["appType"].ToString());
            return ur.UpdateApp(appVersion, lastLocation, appType, User.Identity.appUser().dbUser);
        }

        [HttpGet]
        [Route("searcharticles")]
        public Data searcharticles(int? Page_No = 0, string Search_Data = null, int page_size = 20, int catid = 0, int rno = 1)
        {
            ArticleRepository ar = new ArticleRepository();
            return ar.SearchArticles(Page_No, Search_Data, page_size, catid, rno);
        }

        [HttpGet]
        [Route("GetAllQuestionsByPage")]
        public Data GetAllQuestions(int? Page_No = 0, string Search_Data = null, string Filter_Value = null, Boolean sort_value = false, int page_size = 50)
        {
            QARepository QAr = new QARepository();
            return QAr.GetAllQuestion(User.Identity.appUser().UserId, Page_No, Search_Data, Filter_Value, sort_value, page_size);
        }

        [HttpGet]
        [Route("GetAllQuestions")]
        public Data GetAllQuestions()
        {
            QARepository QAr = new QARepository();
            return QAr.GetAllQuestion();
        }

        [Authorize]
        [HttpGet]
        [Route("RandomKeyword")]
        public Object RandomKeyword()
        {
            KeywordRepository kr = new KeywordRepository();
            return kr.RandomKeyword();
        }

        [APIAuthorization]
        [HttpPost]
        [Route("AddKeyword")]
        public Data AddKeyword(string word)
        {
            KeywordRepository kr = new KeywordRepository();
            return kr.AddKeyword(word);
        }

        // it is for keywords when user enter 3 characters then this api check into our table and return keywords of list
        [APIAuthorization]
        [HttpGet]
        [Route("AutoComplete")]
        public Object AutoComplete(string word)
        {
            KeywordRepository kr = new KeywordRepository();
            return kr.AutoComplete(word);
        }

        [APIAuthorization]
        [HttpGet]
        [Route("GetLabReportByID")]
        public List<lab_reports> GetLabReportByID(long appointment_id)
        {
            LabRepository lr = new LabRepository();
            return lr.GetLabReportByID(appointment_id);
        }

        [APIAuthorization]
        [HttpGet]
        [Route("CancelAppointment")]
        public Data CancelAppointment(long appointment_id)
        {
            AppointmentRepository ar = new AppointmentRepository();
            return ar.CancelAppointment(appointment_id, User.Identity.appUser().UserId);
        }

        [APIAuthorization]
        [HttpGet]
        [Route("GetLabReport")]
        public Data GetLabReport(long appointment_id)
        {
            LabRepository lr = new LabRepository();
            return lr.GetLabReport();
        }

        [APIAuthorization]
        [HttpGet]
        [Route("GetMyLabAppointment")]
        public Object GetMyLabAppointment()
        {
            LabRepository lr = new LabRepository();
            return lr.GetMyLabAppointment(User.Identity.appUser().UserId);
        }

        [APIAuthorization]
        [HttpGet]
        [Route("GetAllAppointmentByUser")]
        public Data GetAllAppointmentByUser()
        {
            LabRepository lr = new LabRepository();
            return lr.GetAllAppointmentByUser(User.Identity.appUser().UserId);
        }

        [HttpGet]
        [Route("Dashboard")]
        public Object dashboard()
        {
            UserRepository ur = new UserRepository();
            return ur.DashboardData();
        }

        // shows list of QA category names
        [APIAuthorization]
        [HttpGet]
        [Route("Get_QA_Category")]
        public Data Get_QA_Category()
        {
            QARepository QAr = new QARepository();
            return QAr.Get_QA_Category();
        }

        [APIAuthorization]
        [HttpGet]
        [Route("InsertUserSkill")]
        public Data InsertUserSkill(long skill_id)
        {
            SkillRepository sr = new SkillRepository();
            return sr.InsertUserSkill(User.Identity.appUser().UserId, skill_id);
        }

        [Authorize]
        [HttpGet]
        [Route("GetUserSkills")]
        public List<SkillUser> GetUserSkills()
        {
            SkillRepository sr = new SkillRepository();
            return sr.GetUserApprovedSkills(User.Identity.appUser().UserId);
        }

        // based on productid, marketid and return market products baesd on filter
        [HttpGet]
        [Route("GetProductPriceFor")]
        public List<ProductPrice> GetMarketProduct(long product_id, long market_id, int filter = 0)
        {
            MarketProductRepository mpr = new MarketProductRepository();
            return mpr.GetMarketProduct(product_id, market_id, filter);
        }

        [HttpGet]
        [Route("GetAllMarkets")]
        public Data GetAllMarkets(int regionId = 0)
        {
            MarketRepository mr = new MarketRepository();
            return mr.GetAllMarkets(regionId);
        }

        [HttpGet]
        [Route("chatbot")]
        public List<chatbotDTO> chatbot(string val)
        {
            ArticleRepository ar = new ArticleRepository();
            return ar.ChatBot(val);
        }

        [HttpGet]
        [Route("GetMarketDetails")]
        public Data GetMarketDetails(int market_id)
        {
            MarketProductRepository mpr = new MarketProductRepository();
            return mpr.GetMarketDetails(market_id);
        }

        [Route("getWeatherDataForCity/{cid}")]
        [HttpGet]
        public Object getWeatherDataForCity(string cid)
        {
            WeatherDataRepository wdr = new WeatherDataRepository();
            return wdr.GetWeatherDataForCity(cid);
        }

        [HttpGet]
        [Route("getRegionWithCities")]
        public Object getRegionData()
        {
            RegionRepository rr = new RegionRepository();
            return rr.GetRegionData();
        }

        #endregion

    }

    public class APIAuthorization : AuthorizeAttribute {

        protected override bool IsAuthorized(HttpActionContext actionContext)
        {

            bool isAuth =  base.IsAuthorized(actionContext);

            if (!isAuth)
            {
                return false;
            }

            var user = HttpContext.Current.User.Identity.appUser();

            return user.IsAuthoizedAppUser;
        }
    }
}

