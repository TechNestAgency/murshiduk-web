@model MurshadikCP.Models.DB.AlertMessage

@section styles{
    <!-- Sweet Alert-->
    <link href="~/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />

    <link href="~/assets/libs/select2/css/select2.min.css" rel="stylesheet" type="text/css" />
}

@{
    ViewBag.Title = "رسالة";
    ViewBag.pTitle = "اضافة رسالة الجديد";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        @*<div class="form-group row">
                            @Html.LabelFor(model => model.alertActionId, "نوع", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("alertActionId", null, htmlAttributes: new { @class = "form-control h-auto" })
                                @Html.ValidationMessageFor(model => model.alertActionId, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                        <div class="form-group row">
                            @Html.LabelFor(model => model.alertHazardId, "خطر", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("alertHazardId", null, htmlAttributes: new { @class = "form-control h-auto" })
                                @Html.ValidationMessageFor(model => model.alertHazardId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @*<div class="form-group row">
                                @Html.LabelFor(model => model.attention_id, "انتباه", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("attention_id", null, htmlAttributes: new { @class = "form-control h-auto" })
                                    @Html.ValidationMessageFor(model => model.attention_id, "", new { @class = "text-danger" })
                                </div>
                            </div>*@

                        @*<div class="form-group row">
                            @Html.LabelFor(model => model.region_id, "منطقة", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("region_id", null, "--Select All--", htmlAttributes: new { @class = "form-control h-auto" })
                                @Html.ValidationMessageFor(model => model.region_id, "", new { @class = "text-danger" })
                                *<p class="text-danger small">في حال تم اختيار جميع المناطق، المدن غير إلزامية</p>
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.city, "مدينة", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.city, null, "--Select All--", new { @class = "select2_city select2 form-control select2-multiple h-auto", multiple = "multiple", required = "required" })
                                @Html.ValidationMessageFor(model => model.city, "مدينة مطلوب", new { @class = "invalid-feedback" })
                            </div>
                        </div>

                        <div class="form-group row">
                            @Html.LabelFor(model => model.season, "الموسم", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                <select class="select2 select2_season form-control select2-multiple" name="multiseason" id="multiseason" multiple="multiple" data-placeholder=" .... أختر" required>
                                    <option value="كل">كل</option>
                                    <option value="فصل الخريف">فصل الخريف</option>
                                    <option value="فصل الشتاء">فصل الشتاء</option>
                                    <option value="فصل الربيع">فصل الربيع</option>
                                    <option value="فصل الصيف"> فصل الصيف</option>
                                </select>
                                @Html.ValidationMessageFor(model => model.season, "الموسم مطلوب", new { @class = "invalid-feedback" })
                            </div>
                        </div>*@

                        @*<div class="form-group row">
                                @Html.LabelFor(model => model.skill_id, "مهارة", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("skill_id", null, htmlAttributes: new { @class = "form-control h-auto" })
                                    @Html.ValidationMessageFor(model => model.skill_id, "", new { @class = "text-danger" })
                                </div>
                            </div>*@

                        <div class="form-group row">
                            @Html.LabelFor(model => model.message, "رسالة", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">

                                @Html.TextAreaFor(model => model.message, 3, 20, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.message, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        @*<div class="form-group row">
                            @Html.LabelFor(model => model.link, "ربط", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">

                                @Html.EditorFor(model => model.link, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.link, "", new { @class = "text-danger" })
                            </div>
                        </div>*@

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="@Resources.Resources.Add" class="btn btn-primary" />
                                @Html.ActionLink(Resources.Resources.Back, "Index", null, htmlAttributes: new { @class = "btn btn-danger" })
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div> <!-- end col -->
</div>

@section scripts{
    <script src="~/assets/libs/parsleyjs/parsley.min.js"></script>

    <script src="~/assets/js/pages/form-validation.init.js"></script>

    <script src="~/assets/libs/sweetalert2/sweetalert2.min.js"></script>
    <script src="~/assets/js/app.js"></script>
    @*<script src="~/assets/js/pages/form-element.init.js"></script>*@
    <script src="~/assets/libs/select2/js/select2.min.js"></script>
}

<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="~/assets/libs/jquery/jquery.min.js"></script>
<script type="text/javascript">
    //window.onload = function () {
    //    var id = $("#region_id").val();
    //    axios.get('/WeatherNotification/bindCityForAlertMessages?id=' + id, {
    //        headers: {
    //            'Content-Type': 'html'
    //        }
    //    }).then(function (r) {
    //        $("#city").empty();
    //        $("#city").append('<option value="0">كل</option>');
    //        $("#city").append(r.data);
    //    })
    //        .catch(function (error) {
    //            swal.fire("Error", error, "error")
    //        });
    //}
    

    $(document).ready(function () {

        

        $("#region_id").change(function () {
            debugger;
            var id = $(this).val();
            if (id != "") {
                axios.get('/WeatherNotification/bindCityForAlertMessages?id=' + id, {
                    headers: {
                        'Content-Type': 'html'
                    }
                }).then(function (r) {
                    $("#city").empty();
                    $("#city").append('<option value="0">كل</option>');
                    $("#city").append(r.data);
                })
                    .catch(function (error) {
                        swal.fire("Error", error, "error")
                    });
            } else {
                $("#city").empty();
            }
        });

        $(".select2").select2({ dir: "rtl"});

       
    });


</script>
