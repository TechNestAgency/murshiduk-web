
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #map {
        height: 400px;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        width: 100%;
    }

    #pac-container {
    }

    /* #pac-input {
    box-sizing: border-box;
    width: 80%;
    margin-top: 10px;
    box-shadow: rgba(0, 0, 0, 0.3) 0px 2px 6px;
    font-size: 16px;
    text-overflow: ellipsis;
    border-width: 1px;
    border-style: solid;
    border-color: transparent;
    border-image: initial;
    padding: 10px 12px;
    outline: none;
    border-radius: 3px;
} */

    #pac-input:focus {
        border-color: #4d90fe;
    }

    .card-icons img {
        height: 20px;
    }
</style>

<div id="map-info" class="col-12">
    <label for="address"> {{__('Address')}} :</label>
    <div id="add-address" class="shadow">
        <div class="pac-card text-center" id="pac-card">
            <div id="pac-container">
                <input autocomplete="off" id="pac-input" type="text" placeholder="Search for your location" class="d-inline-block form-control form-control-lg my-2 shadow d-none" style="width:90%">
            </div>
        </div>
        <div id="map"></div>
        <div id="infowindow-content" class="d-inline-block mx-3">
            <span id="place-name" class="title"></span><br>
            <span id="place-address"></span>
        </div>
        <div class="px-4 py-3">
            <button class="btn btn-primary btn-md btn-confirm-location" disabled>{{__('Confirm Location')}}</button>
            <button id="locate-me" class="locate-me btn btn-success btn-md">{{__('Locate Me')}}</button>
        </div>
    </div>
</div>

@*<canvas id="map">
    
</canvas>*@
@*<button id="locate-me">locate me</button>*@
@*<div>
    <button class="btn-confirm-location">
        confirm
    </button>
</div>*@

<script src="~/assets/libs/jquery/jquery.min.js"></script>

@*<script type="text/javascript">


</script>*@
    <script>
        var is_place = false;

        $('.btn-confirm-location').click(function(e){

            e.preventDefault();

            $('#map-info').addClass('d-none');
            $('#manual-info').removeClass('d-none');

            if (is_place){
            getAddressFromPlace(place)
        }else{
            getAddressFromComponent(snesorLocation.address_components)
        }
        })

    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 24.7133355, lng: 46.6736185},
            zoom: 14,
            disableDefaultUI: true,
            zoomControl: true,
        });
        var card = document.getElementById('pac-card');
        var input = document.getElementById('pac-input');

        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

        var options = {
            types: [],  // or '(cities)' if that's what you want?
            componentRestrictions: {country: "SA"}
        };

        var autocomplete = new google.maps.places.Autocomplete(input, options);
        autocomplete.bindTo('bounds', map);
        autocomplete.setFields(
            ['address_components', 'geometry', 'name', 'formatted_address', 'adr_address']);

        var infowindow = new google.maps.InfoWindow();
        var infowindowContent = document.getElementById('infowindow-content');
        infowindow.setContent(infowindowContent);
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        autocomplete.addListener('place_changed', function() {

            is_place = true;
            $('.btn-confirm-location').removeAttr('disabled');

            infowindow.close();
            marker.setVisible(false);
            place = autocomplete.getPlace();
            if (!place.geometry) {
            window.alert("No details available for input: '" + place.name + "'");
                return;
            }

            if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
            } else {
            map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
            address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
            ].join(' ');
            }

            infowindowContent.children['place-name'].textContent = place.name;
            infowindowContent.children['place-address'].innerHTML = place.adr_address;//address;
            infowindow.open(map, marker);
        });

        document.getElementById('locate-me')
            .addEventListener('click', function(e) {
            e.preventDefault();

                $('.locate-me').attr('disabled', true)

                infowindow.close();

                if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                is_place = false;

                var locationStr = " Location not found! Try again."

                $.getJSON('https://maps.googleapis.com/maps/api/geocode/json?address=' + pos.lat + ',' + pos.lng + '&key=AIzaSyCrhARZOMm6zcMYJrvKaWVPkpyIKCwZxaU', function (response) {

                    if (response.status == 'OK') {

                        snesorLocation = response.results[0];

                        $('.btn-confirm-location').removeAttr('disabled')
                        $('.locate-me').removeAttr('disabled')

                        locationStr = response.results[0].formatted_address;

                        marker.setPosition(pos);
                        marker.setVisible(true);

                        infowindowContent.children['place-name'].textContent = '';
                        infowindowContent.children['place-address'].innerHTML = locationStr;
                        infowindow.open(map, marker);
                    } else {
                        handleLocationError(true, infowindow, map.getCenter());
                    }
                })
            }, function () {
                handleLocationError(true, infowindow, map.getCenter());
            });
                } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infowindow, map.getCenter());
                }
            });

        function handleLocationError(browserHasGeolocation, infowindow, pos) {
            infowindow.setPosition(pos);
            alert(browserHasGeolocation ?
                                'Error: The Geolocation service failed.' :
                                'Error: Your browser doesn\'t support geolocation.');
            infowindow.open(map);
        }
    }


    function getAddressFromPlace(place) {
        //debugger
        var address = [place.name];
        $('#place-address span').each(function(k,v){
            address.push(v.innerText)
            if (v.className === 'locality'){
            // $(".selection-2").val(v.innerText);
            // $(".selection-2").trigger('change');
                var latlng = place.geometry.location.lat() + ","+ place.geometry.location.lng();
                console.log(latlng)
            console.log("City is " + v.innerText)
        }

            if (v.className === 'region'){
            $('#customer_area').val(v.innerText)
                console.log("Area is " + v.innerText)
            }
        })
        $('#customer_address').val(address.join(', '))
    }

    function getAddressFromComponent(comp){

        var address_components = comp;
        address={ };
        jQuery.each(address_components, function(k,v1) {jQuery.each(v1.types, function (k2, v2) { address[v2] = v1.long_name });});

        if (address.locality){
            // $(".selection-2").val(address.locality);
            // $(".selection-2").trigger('change');
            console.log("City is " + address.locality)
        }

        if (address.sublocality){
            $('#customer_area').val(address.sublocality)
            console.log("Area is " + address.sublocality)
        }


        $('#customer_address').val(snesorLocation.formatted_address)
        }
    </script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDRxelgO3vPtNQtGsLV4_oa-PdNWgL_AAg&v=3.exp&libraries=places&region=SA&callback=initMap" async defer>

</script>

@*<script type="text/javascript" src='http://maps.google.com/maps/api/js?key=AIzaSyDRxelgO3vPtNQtGsLV4_oa-PdNWgL_AAg&libraries=places'></script>*@